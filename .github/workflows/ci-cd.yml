name: FireWatch03 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    name: 🛠️ Build & Test
    runs-on: ubuntu-latest
    outputs:
      image-sha: ${{ steps.tag.outputs.image-sha }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B clean package

      - name: Run Tests
        run: mvn test

      - name: Build Docker image
        id: tag
        run: |
          IMAGE_TAG="${GITHUB_SHA}"
          docker build -t firewatch03:$IMAGE_TAG .
          echo "::set-output name=image-sha::$IMAGE_TAG"

      - name: Save Docker image artifact
        run: |
          docker save firewatch03:${{ steps.tag.outputs.image-sha }} > firewatch03.tar
        # disponibiliza o .tar para os próximos jobs
      - uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: firewatch03.tar

  deploy-staging:
    name: 🚀 Deploy Staging (localhost)
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load < firewatch03.tar

      - name: Preparar ambiente Staging
        run: |
          cp .env.staging .env
          echo "Imagem: firewatch03:${{ needs.build.outputs.image-sha }}"
          docker-compose down
          docker-compose up -d

      - name: Validar containers
        run: docker ps --filter name=firewatch03_app

  deploy-production:
    name: 🚀 Deploy Production (localhost)
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load < firewatch03.tar

      - name: Preparar ambiente Produção
        run: |
          cp .env.production .env
          echo "Imagem: firewatch03:${{ needs.build.outputs.image-sha }}"
          docker-compose down
          docker-compose up -d

      - name: Validar containers
        run: docker ps --filter name=firewatch03_app
